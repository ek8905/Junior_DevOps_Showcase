pipeline {
    agent any
    
    tools {
        nodejs 'nodejs-24.1.0'
        jdk 'jdk-21'
    }
    environment {
      SONAR_SCANNER_HOME = tool 'sonarqube7.1';
    }

    properties([
       parameters([
           choice(
               name: 'TARGET_NODE',
               choices: ['192.168.0.102', '192.168.0.103'],
               description: 'Choose the node IP where the app is deployed'
           )
       ])
    ])

    stages {
        stage('Detect App Change') {
          steps {
            script {
              def hash = sh(
                script: "git log -n 1 --pretty=format:%h -- jenkins/solar-system-demo",
                returnStdout: true
              ).trim()
              env.APP_HASH = hash
              echo "App hash is: ${env.APP_HASH}"
            }
          }
        }
        stage('Installing Dependencies') {
            steps {
                dir('jenkins/solar-system-demo') {
                    sh '''
                       npm install --no-audit
                       npm i --package-lock-only
                    '''
                }
            }
        }

        stage('dependency scanning') {
          parallel {
            stage ('npm dependency check') {
              steps {
                 dir('jenkins/solar-system-demo') {
                    sh '''
                        npm audit --audit-level=critical
                        echo $?
                    '''
                 }
              }
            }
            stage('OWASP Dependency Check') {
               steps {
                   dependencyCheck additionalArguments: '''
                       --scan ./jenkins/solar-system-demo
                       --out ./jenkins/solar-system-demo
                       --format ALL
                       --prettyPrint
                       --failOnCVSS 7.0
                   ''', odcInstallation: 'OWASP-DepCheck-12'
                   dependencyCheckPublisher failedTotalCritical: 3, failedTotalHigh: 4, failedTotalLow: 10, failedTotalMedium: 6, pattern: '**/dependency-check-report.xml', stopBuild: true  

               }
            }
          }
        }
        stage('unit testing') {
          steps {
             dir('jenkins/solar-system-demo') {
               sh 'npm test'
             }
          }
        }
        stage('SAST - SonarQube') {
           steps {
              timeout(time: 180, unit: 'SECONDS') {
                  withSonarQubeEnv('sonar-qube-server') {
                     sh '''
                        $SONAR_SCANNER_HOME/bin/sonar-scanner \
                          -Dsonar.projectKey=Junior_devops_showcase \
                          -Dsonar.sources=jenkins/solar-system-demo \
                          -Dsonar.javascript.lcov.reportPaths=jenkins/solar-system-demo/coverage/lcov.info
                     '''
                  }
                  waitForQualityGate abortPipeline: true
              }
           }
        }
        stage('Docker Build Image') {
           steps {
             dir('jenkins') {
                sh 'docker build -t ek89/solar-system:${APP_HASH} .'
             }
           }
        }
        stage('Scan Docker Image TRIVY') {
           steps {
             sh '''
              trivy image ek89/solar-system:${APP_HASH} \
              --severity LOW,MEDIUM \
              --exit-code 0 \
              --quiet \
              --format json -o trivy-image-MEDIUM-results.json

              trivy image ek89/solar-system:${APP_HASH} \
              --severity HIGH,CRITICAL \
              --exit-code 1 \
              --quiet \
              --format json -o trivy-image-CRITICAL-results.json
             '''
           }
           post {
              always {
                 sh '''
                    trivy convert \
                       --format template --template "@/usr/local/share/trivy/templates/html.tpl" \
                       --output trivy-image-MEDIUM-results.html trivy-image-MEDIUM-results.json

                    trivy convert \
                       --format template --template "@/usr/local/share/trivy/templates/html.tpl" \
                       --output trivy-image-CRITICAL-results.html trivy-image-CRITICAL-results.json
                 '''
              }
           }
        }

        stage('push the image to the docker repository') {
          steps {
            withDockerRegistry(credentialsId: 'docker-hub-credentials', url: 'https://index.docker.io/v1/') {
               sh "docker push ek89/solar-system:${APP_HASH}"
            }
          }
        }
        stage('Deploy-AWS EC2') {
          when {
            branch 'feature/*'
          }
          steps {
            withAWS(credentials: 'AWS managing Credentials', region: 'eu-north-1') {
              script {
                env.PUBLIC_IP = sh(
                  script: """aws ec2 describe-instances \
                    --filters "Name=tag:Name,Values=terraform-solsys-web" \
                    --query "Reservations[].Instances[].PublicIpAddress" \
                    --output text""",
                  returnStdout: true
                ).trim()
                echo "Captured IP: ${env.PUBLIC_IP}"

                sshagent(['aws-ec2']) {
                   sh """
                      ssh -o StrictHostKeyChecking=no ec2-user@${env.PUBLIC_IP} "
                        if ! command -v docker >/dev/null; then
                           echo "Docker not found. Installing..."
                           sudo yum update -y
                           sudo yum install -y docker
                           sudo systemctl start docker
                           sudo usermod -aG docker ec2-user
                        fi

                        if sudo docker ps -a | grep -q "solar-system"; then
                           echo "Container found. Stopping..."
                           sudo docker stop solar-system && sudo docker rm solar-system
                           echo "Container stopped and removed."
                        fi

                        sudo docker run --name solar-system -p 3000:3000 -d ek89/solar-system:${APP_HASH}
                      "
                   """
                }
              }
            }
          }
        }
        stage('Integration Testing - AWS EC2') {
          when {
            branch 'feature/*'
          }
          steps {
            withAWS(credentials: 'AWS managing Credentials', region: 'eu-north-1') {
               dir('jenkins/solar-system-demo') {
                 sh '''
                   bash integration_test.sh
                 '''
               }
            }
          }
        }
        stage('K8S Update Image Tag') {
           when {
              branch 'feature/*'
           }
           steps {
              sshagent(['Jenkins-github-ssh-access']) {
                 sh 'git clone -b main git@github.com:ek8905/Junior_DevOps_Showcase.git'
                 dir('Junior_DevOps_Showcase') {
                    script {
                       sh '''
                          #### Ensure delivery branch is available and checked out ####
                          git fetch origin delivery/k8s
                          git checkout delivery/k8s

                          #### Update the image tag in values.yaml ####
                          sed -i "s#ek89/solar-system:.*#ek89/solar-system:${APP_HASH}#g" argo-cd-helm-k8s/values.yaml
                          cat argo-cd-helm-k8s/values.yaml

                          #### Git configuration for CI commits ####
                          git config user.name "Jenkins CI"
                          git config user.email "ci@example.com"

                          #### Stage and conditionally commit ####
                          git add argo-cd-helm-k8s/values.yaml
                          if ! git diff --cached --quiet; then
                             git commit -m "Updated docker image to ${APP_HASH}"
                             git push origin delivery/k8s
                          else
                             echo "No changes to commit. Skipping push."
                          fi
                       '''
                    }
                 }
              }
           }
        }
        stage('App Deployed?') {
            when {
                branch 'delivery/k8s'
            }
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    input message: 'Is the app running in stage env?', ok: 'YES! Ready to be tested'
                }
            }
        }

        stage('DAST - OWASP ZAP') {
            when {
                branch 'delivery/k8s'
            }
            steps {
                script {
                    // Define node IPs
                    def node1 = '192.168.0.102'
                    def node2 = '192.168.0.103'

                    // Select node IP
                    def targetNode = params.TARGET_NODE ?: node1

                    // Validate targetNode 
                    if (!(targetNode == node1 || targetNode == node2)) {
                        error("Invalid TARGET_NODE parameter: ${targetNode}. Must be ${node1} or ${node2}")
                    }

                    echo "Running full ZAP scan against http://${targetNode}:3000"

                    sh """
                        chmod 777 \$(pwd)
                        docker run --rm -v \$(pwd):/zap/wrk/:rw zaproxy/zap-stable \\
                          zap-full-scan.py \\
                          -t http://${targetNode}:30000 \\
                          -r zap_report.html \\
                          -w zap_report.md \\
                          -J zap_json_report.json \\
                          -x zap_xml_report.xml \\
                          -I
                    """
                }
            }
        }

    }
    post {

      always {
         junit allowEmptyResults: true, keepProperties: true, testResults: 'jenkins/solar-system-demo/dependency-check-report.xml'
         publishHTML([allowMissing: true, alwaysLinkToLastBuild: true, icon: '', keepAll: false, reportDir: 'jenkins/solar-system-demo', reportFiles: 'dependency-check-report.html', reportName: 'Solar system dependecy check HTML Report', reportTitles: 'dependency-check-report.html', useWrapperFileDirectly: true])
         junit allowEmptyResults: true, stdioRetention: '', testResults: 'jenkins/solar-system-demo/test-result.xml'

         publishHTML([allowMissing: true, alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'jenkins/solar-system-demo',
             reportFiles: 'trivy-image-CRITICAL-results.html', reportName: 'Trivy Image Critical Vul Report',
             reportTitles: '', useWrapperFileDirectly: true])

         publishHTML([allowMissing: true, alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'jenkins/solar-system-demo',
             reportFiles: 'trivy-image-MEDIUM-results.html', reportName: 'Trivy Image Medium Vul Report',
             reportTitles: '', useWrapperFileDirectly: true])

         junit allowEmptyResults: true, keepProperties: true, testResults: 'jenkins/solar-system-demo/zap_report.html'
         publishHTML([allowMissing: true, alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'jenkins/solar-system-demo',
             reportFiles: '.html', reportName: 'Trivy Image Critical Vul Report',
             reportTitles: '', useWrapperFileDirectly: true])

      }
    }

}
