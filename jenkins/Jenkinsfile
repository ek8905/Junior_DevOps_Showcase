pipeline {
    agent any
    
    tools {
        nodejs 'nodejs-24.1.0'
        jdk 'jdk-21'
    }
    environment {
      SONAR_SCANNER_HOME = tool 'sonarqube7.1';
      AWS_REGION = 'eu-north-1'
      AWS_CREDENTIALS = credentials('AWS managing Credentials')
    }

    stages {
        stage('Installing Dependencies') {
            steps {
                dir('jenkins/solar-system-demo') {
                    sh '''
                       npm install --no-audit
                       npm i --package-lock-only
                    '''
                }
            }
        }
        
        stage('dependency scanning') {
          parallel {
            stage ('npm dependency check') { 
              steps { 
                 dir('jenkins/solar-system-demo') {          
                    sh '''
                        npm audit --audit-level=critical
                        echo $?
                    '''
                 }
              }              
            }
            stage('OWASP Dependency Check') {
               steps {
                   dependencyCheck additionalArguments: '''
                       --scan ./jenkins/solar-system-demo
                       --out ./jenkins/solar-system-demo
                       --format ALL
                       --prettyPrint
                       --failOnCVSS 7.0
                   ''', odcInstallation: 'OWASP-DepCheck-12'
                   dependencyCheckPublisher failedTotalCritical: 3, failedTotalHigh: 4, failedTotalLow: 10, failedTotalMedium: 6, pattern: '**/dependency-check-report.xml', stopBuild: true

               }
            }
          } 
        }
        stage('unit testing') {
          steps {
             dir('jenkins/solar-system-demo') {
               sh 'npm test'
             }
          }
        }
        stage('SAST - SonarQube') {
           steps {
              timeout(time: 180, unit: 'SECONDS') {
                  withSonarQubeEnv('sonar-qube-server') {
                     sh '''
                        $SONAR_SCANNER_HOME/bin/sonar-scanner \
                          -Dsonar.projectKey=Junior_devops_showcase \
                          -Dsonar.sources=jenkins/solar-system-demo \
                          -Dsonar.javascript.lcov.reportPaths=jenkins/solar-system-demo/coverage/lcov.info
                     '''
                  }
                  waitForQualityGate abortPipeline: true
              }
           }
        }
        stage('Docker Build Image') {
           steps {
             dir('jenkins') {
                sh 'docker build -t ek89/solar-system:$GIT_COMMIT .'
             }
           }
        }
        stage('Scan Docker Image TRIVY') {
           steps {
             sh '''
              trivy image ek89/solar-system:$GIT_COMMIT \
              --severity LOW,MEDIUM \
              --exit-code 0 \
              --quiet \
              --format json -o trivy-image-MEDIUM-results.json

              trivy image ek89/solar-system:$GIT_COMMIT \
              --severity HIGH,CRITICAL \
              --exit-code 1 \
              --quiet \
              --format json -o trivy-image-CRITICAL-results.json
             '''
           }
           post {
              always {
                 sh '''
                    trivy convert \
                       --format template --template "@/usr/local/share/trivy/templates/html.tpl" \
                       --output trivy-image-MEDIUM-results.html trivy-image-MEDIUM-results.json

                    trivy convert \
                       --format template --template "@/usr/local/share/trivy/templates/html.tpl" \
                       --output trivy-image-CRITICAL-results.html trivy-image-CRITICAL-results.json
                 '''
              }
           }
        }

        stage('push the image to the docker repository') {
          steps {
            withDockerRegistry(credentialsId: 'docker-hub-credentials', url: 'https://index.docker.io/v1/') {
               sh "docker push ek89/solar-system:$GIT_COMMIT"
            }
          }
        }
        stage('Init - Get EC2 IP') {
          steps {
            withAWS(credentials: "${AWS_CREDENTIALS}", region: "${AWS_REGION}") {
              script {
                env.PUBLIC_IP = sh(
                  script: """aws ec2 describe-instances \
                    --filters "Name=tag:Name,Values=terraform-solsys-web" \
                    --query "Reservations[].Instances[].PublicIpAddress" \
                    --output text""",
                  returnStdout: true
                ).trim()
                echo "Captured IP: ${env.PUBLIC_IP}"
              }
            }
          }
        } 
        stage('Deploy - AWS EC2') {
          when {
             branch 'feature/*'
          }
          steps {
              script {
                  sshagent(['aws-ec2']) {
                     sh """ 
                        ssh -o StrictHostKeyChecking=no ec2-user@${publicIp}"
                          if ! command -v docker >/dev/null; then
                             echo "Docker not found. Installing..."
                             sudo yum update -y
                             sudo yum install -y docker
                             sudo systemctl start docker
                             sudo usermod -aG docker ec2-user
                          fi

                          if sudo docker ps -a | grep -q "solar-system"; then
                             echo "Container found. Stopping..."
                             sudo docker stop solar-system && sudo docker rm solar-system
                             echo "Container stopped and removed."
                          fi

                          sudo docker run --name solar-system -p 3000:3000 -d ek89/solar-system:$GIT_COMMIT
                        "
                     """       
                  }
              }
          }        
        }
        stage('Integration Testing - AWS EC2') {
          when {
            branch 'feature/*'
          }
          steps {
            withAWS(credentials: 'AWS managing Credentials', region: 'eu-north-1') {
              sh '''
                bash integration_test.sh
              '''
            }
          }
        }

    }
    post {
      always {
         junit allowEmptyResults: true, keepProperties: true, testResults: 'jenkins/solar-system-demo/dependency-check-report.xml'
         publishHTML([allowMissing: true, alwaysLinkToLastBuild: true, icon: '', keepAll: false, reportDir: 'jenkins/solar-system-demo', reportFiles: 'dependency-check-report.html', reportName: 'Solar system dependecy check HTML Report', reportTitles: 'dependency-check-report.html', useWrapperFileDirectly: true])
         junit allowEmptyResults: true, stdioRetention: '', testResults: 'jenkins/solar-system-demo/test-result.xml'
         
         publishHTML([allowMissing: true, alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'jenkins/solar-system-demo',
             reportFiles: 'trivy-image-CRITICAL-results.html', reportName: 'Trivy Image Critical Vul Report',
             reportTitles: '', useWrapperFileDirectly: true])

         publishHTML([allowMissing: true, alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'jenkins/solar-system-demo',
             reportFiles: 'trivy-image-MEDIUM-results.html', reportName: 'Trivy Image Medium Vul Report',
             reportTitles: '', useWrapperFileDirectly: true])
    
      }
    }

}
